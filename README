*******************************************************************************
ASSIGNMENT TITLE
-----------------------------------------------------------------------
Name: Abraham Mgowano
Course Name: CS 144 - Computer Networking
Assignment: Lab 2 - Reliable, Sliding window size and multiple clients
Instructor: Phillip Levis and Nick McKeown
Due date: 12th October 9:59p.m
-----------------------------------------------------------------------


PROBLEM DESCRIPTION
------------------------------------------------------------------------
The assignment expects to extend an implementation of a 
reliable stop and wait with a sliding window of size 1. 
To have the following:

1. A sliding send and recieve window larger than one packet
2. Connection demultiplexing where more than one client
   can communicate through a server.

In a server mode the server receives a packet and from it
determine to which list of clients does it belong to using a funciton
called rel_demux that has to been implemented.

The sender and the receiver can now send more than one packet.
The implementation requires that:

1. Once a partial packet has been sent and has not been acknowledged
   yet, the sender should only send full sized packet. This is also
   known as Nagle's Algorithm.

2. If sent packets haven't been acknowledged yet then the sender should
   be optimistic and retransmit only the earliest packet that was sent
   instead of retransmitting every single packet. A method known as
   selective repeat.
-------------------------------------------------------------------------



THE IMPLEMENTATION
------------------------------------------------------------------
The solution to the problem follows the implementation of the
following two state machines, one of the sender and another of the
receiver.



THE FOLLOWING IS THE DESCRIPTION OF THE STATES THE SENDER CAN BE IN AND
ACTIONS HE CAN TAKE
===========================================================================
STATE 1: Maximum number of packets in flight
--------------------------------------------
In this state we do not read in input when rel_read is called.


STATE 2: Read an EOF from the input
------------------------------------ 
In this state we do not read in input when rel_read is called.


STATE 3: Partial packet is in Flight
------------------------------------
If our input buffer is full then send it
If our input buffer is not full and there's more data buffer it some more
If you read in an EOF then set flag EOFreadBuffNotEmpty = true
If you read 0 return


STATE 4: No partial packet in flight
-------------------------------------
If the input buffer is empty and EOFreadBuffNotEmpty is 
true send EOF and go to STATE 2
If the input buffer is empty and you read 0 return
If the input buffer is empty and you read EOF send an EOF
and go to STATE 2

If the input buffer is empty and you read data send it and 
acknowledge that a partial packet is in flight if this is 
the case.
If the input buffer is not empty send the data in it.



STATE 5: Timeout
------------------------------------
In case of a timeout we only re-transmit the earliest packet
that we had sent assuming that every other packet has already been 
buffered by the reciever.
===============================================================================




THE RECEIVER STATE MACHINE
===============================================================================
STATE 1: Received data is corrupted or has invalid length
----------------------------------------------------------
Drop the packet



STATE 2: Received a valid ACK packet
-----------------------------------------------------------
If acknowledgement is within range then go through the list
of packets in flight and updates all those packets with sequence
number less than the acknowledgement number by setting their fields
to empty and if any packet was a partial packet do update that there
is no partial packet in flight.

If acknowledgement is out of range drop it



STATE 3: Received a data packet
--------------------------------------------------------------
If the output buffer already has maximum number of packets drop the
packet.

If the packet is within range then check for the following:
   If the packet is what we were expecting to print and there's space
   available to the output we print it and then go to our output buffer
   and try to see if we can empty it now that we received this packet.
   And send an appropriate acknowledgement.

   If the packet is what we were expecting to print but there's no space
   available to the output then we buffer

   If the packet is within the range but not what we were expecting to
   print then we buffer it and send the acknowledgement requesting for the
   packet we are currently waiting for.

If the packet is out of range we drop it and send the acknowledgement for
the packet we are currently waiting for.




SERVER STATE MACHINE
===============================================================================
STATE 1: Waiting for input
--------------------------
If a malformed data packet is received we drop it

If a data packet of sequence number 1 for a new connection
shows up we create a new connection and send the data packet.

If a data packet for an existing connection shows up we
send the data packet to the connection.

If a data packet of sequence number other than 1 for a new
connection shows up we drop it.


SOME DESIGN DECISIONS
----------------------
There was a choice of whether to have the selective repeat algorithm
only resend the EARLIEST timed out packet or all the packets that have
timed out. That is if the sender has sent packet 1,2,3,4 and 5 and is
currently waiting for an acknowledgement and then at some point in time
it happens that 1 and 2 have timed out while 3, 4 and 5 haven't. My
implementation ONLY resends one assuming that 2 despite timing out is
still buffered by the receiver and it is by sending 1 that 2 and the
remaining packets will be acknowledged. This implementation is an extreme
case of an optimistic selective repeat approach but should aslo work fine.
							
The lists of packets to output and packets in flight were set to be fixed 
depending on the value of the window size. With the nodes having fields
notifying whether or not they are emtpy and so as the window increased
the linked list just got re-used. This might have hurt the throughput
since a lot of update operations had to be made but it helps with
utilization, had I gone for the option of increasing the list everytime
the window size increases.										         
																  
RECOMMENDED FEATURES BUT NOT INCLUDED
--------------------------------------
For simplicity's sake I didn't implement the FINWAIT or the retransmission
both ideas were recommended but not required and so as long as there were
guarantees that the code will work well without them, there was no need
spending extra time on them.
*******************************************************************************